vi ~/.bash_profile


*******************************************************
                     Flume配置过程
                    
A)配置source
B)配置channel
C)配置sink
D)把以上三个组件串起来

a1:agent的名称
r1:source的名称
k1:sink的名称
c1:channel的名称


# example.conf: A single-node Flume configuration

# Name the components on this agent
a1.sources = r1
a1.sinks = k1
a1.channels = c1

# Describe/configure the source
a1.sources.r1.type = netcat
a1.sources.r1.bind = cn
a1.sources.r1.port = 44444

# Describe the sink
a1.sinks.k1.type = logger

# Use a channel which buffers events in memory
a1.channels.c1.type = memory

# Bind the source and sink to the channel
a1.sources.r1.channels = c1
a1.sinks.k1.channel = c1
\\\\\\\\\\
一：(从指定网络端口采集数据输出到控制台)
1.telnet cn 44444
2.启动agent

flume-ng agent \
--name a1 \
--conf $FLUME_HOME/conf \
--conf-file $FLUME_HOME/conf/example.conf \
-Dflume.root.logger=INFO,console

二：(监控一个文件实时采集新增的数据到控制台)

Agent 选型：exec source +memory channel +logger sink 

# example.conf: A single-node Flume configuration

# Name the components on this agent
a1.sources = r1
a1.sinks = k1
a1.channels = c1

# Describe/configure the source/Users/weizhibing/Desktop/安装mysql8.0.txt
a1.sources.r1.type = exec
a1.sources.r1.command = tail -F /root/data/data.log
a1.sources.r1.shell = /bin/sh -c

# Describe the sink
a1.sinks.k1.type = logger

# Use a channel which buffers events in memory
a1.channels.c1.type = memory

# Bind the source and sink to the channel
a1.sources.r1.channels = c1
a1.sinks.k1.channel = c1


启动agent

flume-ng agent \
--name a1 \
--conf $FLUME_HOME/conf \
--conf-file $FLUME_HOME/conf/exec-memory-logger.conf \
-Dflume.root.logger=INFO,console

三：将A服务器上的日志实时采集到B服务器
技术选型：

exec source + memory channel + avro sink 
avro source + memory channel + logger sink 

文件一名 exec-memory-avro.conf
/**/
exec-memory-avro.sources = exec-source
exec-memory-avro.sinks = avro-sink
exec-memory-avro.channels = memory-channel

exec-memory-avro.sources.exec-source.type = exec
exec-memory-avro.sources.exec-source.command = tail -F /root/data/data.log
exec-memory-avro.sources.exec-source.shell = /bin/sh -c

exec-memory-avro.sinks.avro-sink.type = avro
exec-memory-avro.sinks.avro-sink.hostname = cn
exec-memory-avro.sinks.avro-sink.port = 44444

exec-memory-avro.channels.memory-channel.type = memory

exec-memory-avro.sources.exec-source.channels = memory-channel
exec-memory-avro.sinks.avro-sink.channel = memory-channel

/**/


文件二名 avro-memory-logger.conf


/**/
avro-memory-logger.sources = avro-source
avro-memory-logger.sinks = logger-sink
avro-memory-logger.channels = memory-channel


avro-memory-logger.sources.avro-source.type = avro
avro-memory-logger.sources.avro-source.bind = cn
avro-memory-logger.sources.avro-source.port = 44444


avro-memory-logger.sinks.logger-sink.type =logger


avro-memory-logger.channels.memory-channel.type = memory


avro-memory-logger.sources.avro-source.channels = memory-channel
avro-memory-logger.sinks.logger-sink.channel = memory-channel

/**/

先启动 avro-memory-logger

flume-ng agent \
--name avro-memory-logger \
--conf $FLUME_HOME/conf \
--conf-file $FLUME_HOME/conf/avro-memory-logger.conf \
-Dflume.root.logger=INFO,console

flume-ng agent \
--name exec-memory-avro \
--conf $FLUME_HOME/conf \
--conf-file $FLUME_HOME/conf/exec-memory-avro.conf \
-Dflume.root.logger=INFO,console



-------------------------------------------------------


 
********************************************************

〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜
                         kafka配置过程
1.单节点单broker部署及使用
	第一步：启动zookeeper ./zkServer.sh start
	启动kafka.  kafka-server-start.sh $KAFKA_HOME/config/server.properties 
	(生产消息)创建 topic kafka-topics.sh --create --zookeeper cn:2181 --replication-factor 1 --partitions 1 --topic hello_topic
	发送消息 kafka-console-producer.sh --broker-list cn:9092 --topic hello_topic
	消费消息 kafka-console-consumer.sh --zookeeper cn:2181 --topic hello_topic --from-beginning


	查看所有topic   kafka-topics.sh --list --zookeeper cn:2181
 	查看所有topic的详细信息   kafka-topics.sh --describe --zookeeper cn:2181
	查看指定topic的详细信息	   kafka-topics.sh --describe --zookeeper cn:2181 topic hello_topic
2.单节点多broker部署及使用
	Server-1.properties
	Server-2.properties
	Server-3.properties

	执行1:kafka-server-start.sh -daemon $KAFKA_HOME/config/server-1.properties &
	执行2:kafka-server-start.sh -daemon $KAFKA_HOME/config/server-2.properties &
	执行3:kafka-server-start.sh -daemon $KAFKA_HOME/config/server-3.properties &
	
	创建topic kafka-topics.sh --create --zookeeper cn:2181 --replication-factor 3 --partitions 1 --topic my-replicated-topic
	发送消息 kafka-console-producer.sh --broker-list cn:9093,cn:9094,cn:9095 --topic my-replicated-topic
	消费消息 kafka-console-consumer.sh --zookeeper cn:2181 --topic my-replicated-topic

	

********************************************************

spark-submit的使用（生产）

./spark-submit --master local[2] \
--class org.apache.spark.examples.streaming.NetworkWordCount \
--name NetworkWordCount \
/root/app/spark-2.2.0-bin-hadoop2.6/examples/jars/spark-examples_2.11-2.2.0.jar cn 9999


spark-shell的使用（测试）
./spark-shell --master local[2] \

********************************************************

· 打开Mac终端，切换到root权限下

    切换root权限： sudo -i  

·通过ssh命令连接linux服务器

    ssh root@47.96.161.12

    root是账户名，@后面的是连接的ip地址

然后根据提示输入密码即可成功 Cn160402

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that a host key has just been changed.
The fingerprint for the RSA key sent by the remote host is
SHA256:DO1mJ5DknGbddvALf5ZPm9q4DTMQ1zdRQkxCmL2Q7Zk.
Please contact your system administrator.
Add correct host key in /var/root/.ssh/known_hosts to get rid of this message.
Offending ECDSA key in /var/root/.ssh/known_hosts:1
RSA host key for 47.96.161.12 has changed and you have requested strict checking.
Host key verification failed.


解决办法 ：1.ssh-keygen -R 47.96.161.12
	 2./var/root/.ssh/known_hosts 把这个文件删除。





个人服务器搭建一个 MySQL 数据库，来读写一些简单的接口数据处理。

废话不多说，直接撸起。

1.切换到用户目录



cd ~

2.下载 rpm 包

在官网找到对应的 MySQL 的源，我们选择 mysql80-community-release-el7-1.noarch.rpm 社区免费正式发布版8.0



wget https://repo.mysql.com//mysql80-community-release-el7-1.noarch.rpm

3.安装 rpm 包



rpm -ivh mysql80-community-release-el7-1.noarch.rpm

4.修改 MySQL 的repo源，使MySQL8.0可用

使用 vim 编辑

vi /etc/yum.repos.d/mysql-community.repo

找到 [mysql80-community] 确保 enabled=1

修改，保存并退出。

5.安装 mysql-server

yum install mysql-server

开始下载并安装 MySQL，中间会有几次询问你，一路 yes 即可，等待直到完成。

6.修改 MySQL 的访问权限



chown -R root:root /var/lib/mysql 

7.重启 MySQL 服务



service mysqld restart

至此 MySQL8.0 的安装就算完成了。

安装完成后，我们要登录使用 MySQL，但是我们需要访问的密码，安装的时候已经为我们生成了一个随机密码，我们必须重置密码才能使用，因为 MySQL8.0 的密码重还比较麻烦，下一篇我来讲解如何重置密码。

---------------------

本文来自 IT大飞说 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/xinpengfei521/article/details/80399800?utm_source=copy 



上一篇文章我们已经讲完了 MySQL 的安装，本篇接下来将一下如何重置密码。

1.查看自动生成的密码

安装完成后 MySQL会给我们自动生成一个随机密码

查看命令如下：



grep 'temporary password' /var/log/mysqld.log

因为自动的生成的密码无法直接使用，也不便于我们记忆，所以我们要修改密码。

2.配置文件 MySQL 免密码登录

编辑 MySQL 的配置文件 

vim /etc/my.cnf

在 pid 开头的下面一行加入下面这句 



skip-grant-tables

保存并退出。

3.重启 MySQL 服务



service mysqld restart

4.免密码登录到 MySQL 上



mysql -u root -p

提示输入密码时直接敲回车。

5.选择 mysql 数据库



use mysql;

因为 mysql 数据库中存储了一张 MySQL 用户的 user 表

6.在 mysql 数据库的 user 表中查看当前 root 用户的相关信息



select host, user, authentication_string, plugin from user; 

执行完上面的命令后会显示一个表格

表格中有以下信息：

host: 允许用户登录的 ip ‘位置’ % 表示可以远程；

user: 当前数据库的用户名；

authentication_string: 用户密码（在mysql 5.7.9以后废弃了password字段和password()函数）；

plugin： 密码加密方式；

7.将默认的 root 密码置空



use mysql;  
update user set authentication_string='' where user='root';

8.退出 mysql命令行



quit;
9.删除 /etc/my.cnf 文件最后的 skip-grant-tables



vim /etc/my.cnf

删除 skip-grant-tables 并保存退出。

10.重启 MySQL 服务



service mysqld restart;

11.重新登录到 MySQL 上



mysql -u root -p

提示输入密码时直接敲回车，因为我们刚才已经将密码置为空了。

12.使用 ALTER 修改 root 用户密码



ALTER user 'root'@'localhost' IDENTIFIED BY 'Xpf123@';

其中 Xpf123@ 为你设置的新密码，注意这个密码如果设置的比较简单，例如 123456 等等，会设置不成功，它会提示你设置的密码太简单，最好设置成大写字母、数字、符号的组合。

执行完之后会提示你 OK 的话，就代表修改成功了，至此重置密码也就算是完了，你可以使用新设置的密码去登录试试。

可能很多同学在修改的密码中遇到了很多问题，例如装的是 MySQL 8.0，然后去重置密码，还是用的旧的命令去修改密码，导致报错，因为 MySQL 5.7.6 以后废弃了 user 表中的 password 字段和 password() 方法，所以使用旧的方法去重置密码对 mysql 8.0 是不行的！

好了，今天的讲解就到这里吧。

---------------------

2018-09-28T08:14:11.689396Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: uRzuMz(jf1ku


本文来自 IT大飞说 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/xinpengfei521/article/details/80400142?utm_source=copy 


update user set host='%' where user='root';


上一篇文章讲解了重置 MySQL 的密码，有同学反馈无法程连接到数据库，这是因为 MySQL 安装完成后只支持 localhost 访问，我们必须设置一下才可以远程访问，另外还有一些 MySQL 8.0 连接时的一些问题，本文也会一并进行讲解如何解决。

1.登录MySQL 



mysql -u root -p

输入您的密码

2.选择 mysql 数据库



use mysql;

因为 mysql 数据库中存储了用户信息的 user 表。

3.在 mysql 数据库的 user 表中查看当前 root 用户的相关信息



select host, user, authentication_string, plugin from user; 

执行完上面的命令后会显示一个表格

查看表格中 root 用户的 host，默认应该显示的 localhost，只支持本地访问，不允许远程访问。

4.授权 root 用户的所有权限并设置远程访问



-- GRANT ALL ON *.* TO 'root'@'%';
grant all on *.* to 'root'@'localhost'

(GRANT ALL ON 表示所有权限，% 表示通配所有 host，可以访问远程。)

5.刷新权限

所有操作后，应执行



flush privileges;

6.查看 root 用户的 host

再次执行步骤 2，你会发现 root 用户的 host 已经变成 %，说明我们的修改已经成功，可以远程访问了。

7.访问数据库

远程访问数据库的可视化工具比较多如：Navicat、SQLyog、MySQL workbench 等，我这里使用 Navicat

输入访问的 host 和密码，报 2059 错误，这是因为 MySql8.0 版本 和 5.0 的加密规则不一样，而现在的可视化工具只支持旧的加密方式。

此问题有两种方法，一种是更新 Navicat 驱动来解决此问题，另一种是将 MySQL 用户登录的加密规则修改为 mysql_native_password，第一种方法我试过了没有起作用，我这里采用第二种方法。

8.修改加密规则  



ALTER USER 'root'@'localhost' IDENTIFIED BY 'password' PASSWORD EXPIRE NEVER; 

password 为你当前密码。

9.更新 root 用户密码 



ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'password'; 

password 为你新设置的密码。

10.刷新权限



FLUSH PRIVILEGES; 

OK，设置完成，再次使用 Navicat 连接数据库，oh yeah~

完美解决！

---------------------

本文来自 IT大飞说 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/xinpengfei521/article/details/80403965?utm_source=copy   


